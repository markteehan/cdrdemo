## If false, connect will not be installed
##
enabled: false
## Name of the connector
##
##
name: replicator
#  ## Total replica count equals to the total node required to deploy pods
#  ##
replicas: 3
## Image information
##
image:
  repository: confluentinc/cp-enterprise-replicator-operator
  tag: 5.3.0.0
## Pod resources configuration
##
resources:
  ## It is recommended to set both resource requests and limits.
  ## If not configured, kubernetes will set cpu/memory defaults.
  ## Reference: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
  requests:
    cpu: 200m
    memory: 4Gi
  limits: {}

## JVM configuration
jvmConfig:
  heapSize: 4G

## REST Endpoint Configuration
tls:
 enabled: false
 port: 8443
 authentication:
  type: ""
 fullchain: |-
 privkey: |-
 cacerts: |-

## Pod termination grace-period
##
terminationGracePeriodSeconds: 30

## External Access
##
loadBalancer:
  ## Create a LoadBalancer for external networking
  enabled: false
  ## External will create public facing endpoints, setting this to internal will
  ## create a private-facing ELB with VPC peering
  type: external
  ## Add other annotations here that you want on the ELB
  annotations: {}
  ## If external access is enable, the fqdn must be provided to access replicator
  ##
  domain: ""
  ## If prefix is configured, external DNS name is configured as <prefix>.<domain>
  ## otherwise external DNS name is configured as <name>.<domain> where name is cluster-name.
  prefix: ""

##
## Destination Kafka Cluster dependencies for internal topics
##  
dependencies:
  kafka:
    tls: 
      ## If true, TLS configuration is enable
      ##
      enabled: false
      ## Supported authentication types: plain, tls
      ##
      authentication:
         type: ""
      ## If true, inter-communication will be encrypted if TLS is enabled. The bootstrapEndpoint will have FQDN name.
      ## If false, the security setting is configured to use either SASL_PLAINTEXT or PLAINTEXT
      internal: false
    ## If above tls.internal is true, configure with Kafka bootstrap DNS configuration on port 9092 e.g <kafka.name>.<domain>:9092
    ## If above tls.internal is false, configure with Kafka service name on port 9071 eg. <kafka.name>:9071 or FQDN name of Kafka serivce name e.g <name>.<namespace>.svc.cluster.local:9071
    bootstrapEndpoint: ""
    ## Broker initial count configuration
    ##
    brokerCount: 3    

key:
  converter: org.apache.kafka.connect.json.JsonConverter
value:
  converter: org.apache.kafka.connect.json.JsonConverter
schemas:
  enabled: false   
      
## Pod distribution on nodes with given key and values
## The node Affinity configuration uses preferredDuringSchedulingIgnoredDuringExecution
## https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
nodeAffinity : {}
#nodeAffinity:
#  key: components
#  values:
#  - connect
#  - app

## Pod Anti-Affinity
## It uses preferredDuringSchedulingIgnoredDuringExecution
## https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#interlude-built-in-node-labels
## Use this capability, if the cluster has somekind of concept of racks
rack: {}
#rack:
# topology: kubernetes.io/hostname

## Disable HostPort
## This is mechanism to isolate pods of same type running on the same node through port mapping on the host.
## If this feature is true, make sure to use nodeAffinity and rack to distribute pod across nodes.
## Take precaution before enabling it for the Kafka cluster
disableHostPort: true